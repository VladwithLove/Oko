// Generated by view binder compiler. Do not edit!
package com.example.oko.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.oko.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemSystemsBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView itemImage;

  @NonNull
  public final TextView systemsCount;

  @NonNull
  public final TextView systemsName;

  @NonNull
  public final TextView systemsObject;

  @NonNull
  public final TextView systemsRoom;

  private ItemSystemsBinding(@NonNull CardView rootView, @NonNull ImageView itemImage,
      @NonNull TextView systemsCount, @NonNull TextView systemsName,
      @NonNull TextView systemsObject, @NonNull TextView systemsRoom) {
    this.rootView = rootView;
    this.itemImage = itemImage;
    this.systemsCount = systemsCount;
    this.systemsName = systemsName;
    this.systemsObject = systemsObject;
    this.systemsRoom = systemsRoom;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemSystemsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemSystemsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_systems, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemSystemsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.itemImage;
      ImageView itemImage = ViewBindings.findChildViewById(rootView, id);
      if (itemImage == null) {
        break missingId;
      }

      id = R.id.systemsCount;
      TextView systemsCount = ViewBindings.findChildViewById(rootView, id);
      if (systemsCount == null) {
        break missingId;
      }

      id = R.id.systemsName;
      TextView systemsName = ViewBindings.findChildViewById(rootView, id);
      if (systemsName == null) {
        break missingId;
      }

      id = R.id.systemsObject;
      TextView systemsObject = ViewBindings.findChildViewById(rootView, id);
      if (systemsObject == null) {
        break missingId;
      }

      id = R.id.systemsRoom;
      TextView systemsRoom = ViewBindings.findChildViewById(rootView, id);
      if (systemsRoom == null) {
        break missingId;
      }

      return new ItemSystemsBinding((CardView) rootView, itemImage, systemsCount, systemsName,
          systemsObject, systemsRoom);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
